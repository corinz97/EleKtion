[{"name":"abstract class CompetitionAbstraction<T : ScoreMetric> : Competition<T> ","description":"entities.abstract.CompetitionAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-competition-abstraction/index.html","searchKeys":["CompetitionAbstraction","abstract class CompetitionAbstraction<T : ScoreMetric> : Competition<T> ","entities.abstract.CompetitionAbstraction"]},{"name":"abstract class CompetitorAbstraction<S : ScoreMetric> : Competitor<S> ","description":"entities.abstract.CompetitorAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-competitor-abstraction/index.html","searchKeys":["CompetitorAbstraction","abstract class CompetitorAbstraction<S : ScoreMetric> : Competitor<S> ","entities.abstract.CompetitorAbstraction"]},{"name":"abstract class PollAbstraction<S : ScoreMetric, V : Vote> : Poll<S, V> ","description":"entities.abstract.PollAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/index.html","searchKeys":["PollAbstraction","abstract class PollAbstraction<S : ScoreMetric, V : Vote> : Poll<S, V> ","entities.abstract.PollAbstraction"]},{"name":"abstract class RankingAbstraction<S : ScoreMetric> : Ranking<S> ","description":"entities.abstract.RankingAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-ranking-abstraction/index.html","searchKeys":["RankingAbstraction","abstract class RankingAbstraction<S : ScoreMetric> : Ranking<S> ","entities.abstract.RankingAbstraction"]},{"name":"abstract class ScoreAbstraction<T : ScoreMetric> : Score<T> ","description":"entities.abstract.ScoreAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-score-abstraction/index.html","searchKeys":["ScoreAbstraction","abstract class ScoreAbstraction<T : ScoreMetric> : Score<T> ","entities.abstract.ScoreAbstraction"]},{"name":"abstract class ScoreMetric : Comparable<Any> ","description":"entities.types.ScoreMetric","location":"kotlin-mp-thesis-library/entities.types/-score-metric/index.html","searchKeys":["ScoreMetric","abstract class ScoreMetric : Comparable<Any> ","entities.types.ScoreMetric"]},{"name":"abstract fun competition(compInit: Competition<S>.() -> Unit): Competition<S>","description":"entities.interfaces.Poll.competition","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/competition.html","searchKeys":["competition","abstract fun competition(compInit: Competition<S>.() -> Unit): Competition<S>","entities.interfaces.Poll.competition"]},{"name":"abstract fun competitor(compInit: Competitor<T>.() -> Unit): Competitor<T>","description":"entities.interfaces.Competition.competitor","location":"kotlin-mp-thesis-library/entities.interfaces/-competition/competitor.html","searchKeys":["competitor","abstract fun competitor(compInit: Competitor<T>.() -> Unit): Competitor<T>","entities.interfaces.Competition.competitor"]},{"name":"abstract fun computeAllPolls(): List<Ranking<S>>","description":"entities.interfaces.PollManager.computeAllPolls","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-manager/compute-all-polls.html","searchKeys":["computeAllPolls","abstract fun computeAllPolls(): List<Ranking<S>>","entities.interfaces.PollManager.computeAllPolls"]},{"name":"abstract fun computeByAlgorithmRules(votes: List<V>): Ranking<S>","description":"entities.interfaces.PollAlgorithm.computeByAlgorithmRules","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-algorithm/compute-by-algorithm-rules.html","searchKeys":["computeByAlgorithmRules","abstract fun computeByAlgorithmRules(votes: List<V>): Ranking<S>","entities.interfaces.PollAlgorithm.computeByAlgorithmRules"]},{"name":"abstract fun computePoll(): Ranking<S>","description":"entities.interfaces.Poll.computePoll","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/compute-poll.html","searchKeys":["computePoll","abstract fun computePoll(): Ranking<S>","entities.interfaces.Poll.computePoll"]},{"name":"abstract fun condorcetAlgorithm(algInit: PollAlgorithm<S, ListOfPreferencesVote<S>>.() -> Unit): PollAlgorithm<S, ListOfPreferencesVote<S>>","description":"entities.interfaces.Poll.condorcetAlgorithm","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/condorcet-algorithm.html","searchKeys":["condorcetAlgorithm","abstract fun condorcetAlgorithm(algInit: PollAlgorithm<S, ListOfPreferencesVote<S>>.() -> Unit): PollAlgorithm<S, ListOfPreferencesVote<S>>","entities.interfaces.Poll.condorcetAlgorithm"]},{"name":"abstract fun majorityVotesAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","description":"entities.interfaces.Poll.majorityVotesAlgorithm","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/majority-votes-algorithm.html","searchKeys":["majorityVotesAlgorithm","abstract fun majorityVotesAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","entities.interfaces.Poll.majorityVotesAlgorithm"]},{"name":"abstract fun majorityVotesHScoreAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","description":"entities.interfaces.Poll.majorityVotesHScoreAlgorithm","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/majority-votes-h-score-algorithm.html","searchKeys":["majorityVotesHScoreAlgorithm","abstract fun majorityVotesHScoreAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","entities.interfaces.Poll.majorityVotesHScoreAlgorithm"]},{"name":"abstract fun majorityVotesLScoreAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","description":"entities.interfaces.Poll.majorityVotesLScoreAlgorithm","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/majority-votes-l-score-algorithm.html","searchKeys":["majorityVotesLScoreAlgorithm","abstract fun majorityVotesLScoreAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","entities.interfaces.Poll.majorityVotesLScoreAlgorithm"]},{"name":"abstract fun poll(newPoll: Poll<S, V>.() -> Unit): Poll<S, V>","description":"entities.interfaces.PollManager.poll","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-manager/poll.html","searchKeys":["poll","abstract fun poll(newPoll: Poll<S, V>.() -> Unit): Poll<S, V>","entities.interfaces.PollManager.poll"]},{"name":"abstract fun printRanking()","description":"entities.interfaces.Ranking.printRanking","location":"kotlin-mp-thesis-library/entities.interfaces/-ranking/print-ranking.html","searchKeys":["printRanking","abstract fun printRanking()","entities.interfaces.Ranking.printRanking"]},{"name":"abstract infix fun List<String>.then(s: String): List<String>","description":"entities.interfaces.Poll.then","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/then.html","searchKeys":["then","abstract infix fun List<String>.then(s: String): List<String>","entities.interfaces.Poll.then"]},{"name":"abstract infix fun List<String>.votedBy(voterIdentifier: String): ListOfPreferencesVote<S>","description":"entities.interfaces.Poll.votedBy","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/voted-by.html","searchKeys":["votedBy","abstract infix fun List<String>.votedBy(voterIdentifier: String): ListOfPreferencesVote<S>","entities.interfaces.Poll.votedBy"]},{"name":"abstract infix fun String.then(s: String): List<String>","description":"entities.interfaces.Poll.then","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/then.html","searchKeys":["then","abstract infix fun String.then(s: String): List<String>","entities.interfaces.Poll.then"]},{"name":"abstract infix fun String.votedBy(voterIdentifier: String): SinglePreferenceVote<S>","description":"entities.interfaces.Poll.votedBy","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/voted-by.html","searchKeys":["votedBy","abstract infix fun String.votedBy(voterIdentifier: String): SinglePreferenceVote<S>","entities.interfaces.Poll.votedBy"]},{"name":"abstract infix fun initializedAs(initializer: PollManager<S, V>.() -> Unit): PollManager<S, V>","description":"entities.interfaces.PollManager.initializedAs","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-manager/initialized-as.html","searchKeys":["initializedAs","abstract infix fun initializedAs(initializer: PollManager<S, V>.() -> Unit): PollManager<S, V>","entities.interfaces.PollManager.initializedAs"]},{"name":"abstract infix override fun List<String>.then(s: String): List<String>","description":"entities.abstract.PollAbstraction.then","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/then.html","searchKeys":["then","abstract infix override fun List<String>.then(s: String): List<String>","entities.abstract.PollAbstraction.then"]},{"name":"abstract infix override fun List<String>.votedBy(voterIdentifier: String): ListOfPreferencesVote<S>","description":"entities.abstract.PollAbstraction.votedBy","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/voted-by.html","searchKeys":["votedBy","abstract infix override fun List<String>.votedBy(voterIdentifier: String): ListOfPreferencesVote<S>","entities.abstract.PollAbstraction.votedBy"]},{"name":"abstract infix override fun String.then(s: String): List<String>","description":"entities.abstract.PollAbstraction.then","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/then.html","searchKeys":["then","abstract infix override fun String.then(s: String): List<String>","entities.abstract.PollAbstraction.then"]},{"name":"abstract infix override fun String.votedBy(voterIdentifier: String): SinglePreferenceVote<S>","description":"entities.abstract.PollAbstraction.votedBy","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/voted-by.html","searchKeys":["votedBy","abstract infix override fun String.votedBy(voterIdentifier: String): SinglePreferenceVote<S>","entities.abstract.PollAbstraction.votedBy"]},{"name":"abstract operator fun Competition<S>.unaryMinus()","description":"entities.interfaces.Poll.unaryMinus","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/unary-minus.html","searchKeys":["unaryMinus","abstract operator fun Competition<S>.unaryMinus()","entities.interfaces.Poll.unaryMinus"]},{"name":"abstract operator fun Competitor<T>.unaryPlus()","description":"entities.interfaces.Competition.unaryPlus","location":"kotlin-mp-thesis-library/entities.interfaces/-competition/unary-plus.html","searchKeys":["unaryPlus","abstract operator fun Competitor<T>.unaryPlus()","entities.interfaces.Competition.unaryPlus"]},{"name":"abstract operator fun Poll<S, V>.unaryPlus()","description":"entities.interfaces.PollManager.unaryPlus","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-manager/unary-plus.html","searchKeys":["unaryPlus","abstract operator fun Poll<S, V>.unaryPlus()","entities.interfaces.PollManager.unaryPlus"]},{"name":"abstract operator fun PollAlgorithm<S, V>.unaryMinus()","description":"entities.interfaces.Poll.unaryMinus","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/unary-minus.html","searchKeys":["unaryMinus","abstract operator fun PollAlgorithm<S, V>.unaryMinus()","entities.interfaces.Poll.unaryMinus"]},{"name":"abstract operator fun Score<S>.unaryPlus()","description":"entities.interfaces.Competitor.unaryPlus","location":"kotlin-mp-thesis-library/entities.interfaces/-competitor/unary-plus.html","searchKeys":["unaryPlus","abstract operator fun Score<S>.unaryPlus()","entities.interfaces.Competitor.unaryPlus"]},{"name":"abstract operator fun String.unaryMinus()","description":"entities.interfaces.Competition.unaryMinus","location":"kotlin-mp-thesis-library/entities.interfaces/-competition/unary-minus.html","searchKeys":["unaryMinus","abstract operator fun String.unaryMinus()","entities.interfaces.Competition.unaryMinus"]},{"name":"abstract operator fun String.unaryMinus()","description":"entities.interfaces.Competitor.unaryMinus","location":"kotlin-mp-thesis-library/entities.interfaces/-competitor/unary-minus.html","searchKeys":["unaryMinus","abstract operator fun String.unaryMinus()","entities.interfaces.Competitor.unaryMinus"]},{"name":"abstract operator fun V.unaryPlus()","description":"entities.interfaces.Poll.unaryPlus","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/unary-plus.html","searchKeys":["unaryPlus","abstract operator fun V.unaryPlus()","entities.interfaces.Poll.unaryPlus"]},{"name":"abstract val identifier: String","description":"entities.interfaces.Voter.identifier","location":"kotlin-mp-thesis-library/entities.interfaces/-voter/identifier.html","searchKeys":["identifier","abstract val identifier: String","entities.interfaces.Voter.identifier"]},{"name":"abstract val parameter: String","description":"entities.interfaces.PollAlgorithmParameter.parameter","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-algorithm-parameter/parameter.html","searchKeys":["parameter","abstract val parameter: String","entities.interfaces.PollAlgorithmParameter.parameter"]},{"name":"abstract val ranking: Map<Set<Competitor<S>>, Int?>","description":"entities.interfaces.Ranking.ranking","location":"kotlin-mp-thesis-library/entities.interfaces/-ranking/ranking.html","searchKeys":["ranking","abstract val ranking: Map<Set<Competitor<S>>, Int?>","entities.interfaces.Ranking.ranking"]},{"name":"abstract val votedCompetitors: List<Competitor<S>>","description":"entities.interfaces.ListOfPreferencesVote.votedCompetitors","location":"kotlin-mp-thesis-library/entities.interfaces/-list-of-preferences-vote/voted-competitors.html","searchKeys":["votedCompetitors","abstract val votedCompetitors: List<Competitor<S>>","entities.interfaces.ListOfPreferencesVote.votedCompetitors"]},{"name":"abstract var competition: Competition<S>","description":"entities.interfaces.Poll.competition","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/competition.html","searchKeys":["competition","abstract var competition: Competition<S>","entities.interfaces.Poll.competition"]},{"name":"abstract var competitionName: String","description":"entities.interfaces.Competition.competitionName","location":"kotlin-mp-thesis-library/entities.interfaces/-competition/competition-name.html","searchKeys":["competitionName","abstract var competitionName: String","entities.interfaces.Competition.competitionName"]},{"name":"abstract var competitors: List<Competitor<T>>","description":"entities.interfaces.Competition.competitors","location":"kotlin-mp-thesis-library/entities.interfaces/-competition/competitors.html","searchKeys":["competitors","abstract var competitors: List<Competitor<T>>","entities.interfaces.Competition.competitors"]},{"name":"abstract var name: String","description":"entities.interfaces.Competitor.name","location":"kotlin-mp-thesis-library/entities.interfaces/-competitor/name.html","searchKeys":["name","abstract var name: String","entities.interfaces.Competitor.name"]},{"name":"abstract var pollAlgorithm: PollAlgorithm<S, V>","description":"entities.interfaces.Poll.pollAlgorithm","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/poll-algorithm.html","searchKeys":["pollAlgorithm","abstract var pollAlgorithm: PollAlgorithm<S, V>","entities.interfaces.Poll.pollAlgorithm"]},{"name":"abstract var pollAlgorithmParameters: List<PollAlgorithmParameter>","description":"entities.interfaces.PollAlgorithm.pollAlgorithmParameters","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-algorithm/poll-algorithm-parameters.html","searchKeys":["pollAlgorithmParameters","abstract var pollAlgorithmParameters: List<PollAlgorithmParameter>","entities.interfaces.PollAlgorithm.pollAlgorithmParameters"]},{"name":"abstract var pollList: List<Poll<S, V>>","description":"entities.interfaces.PollManager.pollList","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-manager/poll-list.html","searchKeys":["pollList","abstract var pollList: List<Poll<S, V>>","entities.interfaces.PollManager.pollList"]},{"name":"abstract var scoreValue: T","description":"entities.interfaces.Score.scoreValue","location":"kotlin-mp-thesis-library/entities.interfaces/-score/score-value.html","searchKeys":["scoreValue","abstract var scoreValue: T","entities.interfaces.Score.scoreValue"]},{"name":"abstract var scores: List<Score<S>>","description":"entities.interfaces.Competitor.scores","location":"kotlin-mp-thesis-library/entities.interfaces/-competitor/scores.html","searchKeys":["scores","abstract var scores: List<Score<S>>","entities.interfaces.Competitor.scores"]},{"name":"abstract var votedCompetitor: Competitor<S>","description":"entities.interfaces.SinglePreferenceVote.votedCompetitor","location":"kotlin-mp-thesis-library/entities.interfaces/-single-preference-vote/voted-competitor.html","searchKeys":["votedCompetitor","abstract var votedCompetitor: Competitor<S>","entities.interfaces.SinglePreferenceVote.votedCompetitor"]},{"name":"abstract var voter: Voter","description":"entities.interfaces.Vote.voter","location":"kotlin-mp-thesis-library/entities.interfaces/-vote/voter.html","searchKeys":["voter","abstract var voter: Voter","entities.interfaces.Vote.voter"]},{"name":"abstract var votesList: List<V>","description":"entities.interfaces.Poll.votesList","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/votes-list.html","searchKeys":["votesList","abstract var votesList: List<V>","entities.interfaces.Poll.votesList"]},{"name":"class DefaultPollManager<S : ScoreMetric, V : Vote> : PollManager<S, V> ","description":"entities.implementations.DefaultPollManager","location":"kotlin-mp-thesis-library/entities.implementations/-default-poll-manager/index.html","searchKeys":["DefaultPollManager","class DefaultPollManager<S : ScoreMetric, V : Vote> : PollManager<S, V> ","entities.implementations.DefaultPollManager"]},{"name":"class DescendingListOfPreferencesVote<S : ScoreMetric> : ListOfPreferencesVote<S> ","description":"entities.implementations.DescendingListOfPreferencesVote","location":"kotlin-mp-thesis-library/entities.implementations/-descending-list-of-preferences-vote/index.html","searchKeys":["DescendingListOfPreferencesVote","class DescendingListOfPreferencesVote<S : ScoreMetric> : ListOfPreferencesVote<S> ","entities.implementations.DescendingListOfPreferencesVote"]},{"name":"class HighestScore<S : ScoreMetric> : Comparator<Score<S>> ","description":"entities.types.Comparator.HighestScore","location":"kotlin-mp-thesis-library/entities.types/-comparator/-highest-score/index.html","searchKeys":["HighestScore","class HighestScore<S : ScoreMetric> : Comparator<Score<S>> ","entities.types.Comparator.HighestScore"]},{"name":"class MajorityVotesAlgorithm<S : ScoreMetric>(var pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf()) : PollAlgorithm<S, SinglePreferenceVote<S>> ","description":"entities.implementations.MajorityVotesAlgorithm","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-algorithm/index.html","searchKeys":["MajorityVotesAlgorithm","class MajorityVotesAlgorithm<S : ScoreMetric>(var pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf()) : PollAlgorithm<S, SinglePreferenceVote<S>> ","entities.implementations.MajorityVotesAlgorithm"]},{"name":"class MajorityVotesThenHighestScoreAlgorithm<S : ScoreMetric>(var pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf()) : PollAlgorithm<S, SinglePreferenceVote<S>> ","description":"entities.implementations.MajorityVotesThenHighestScoreAlgorithm","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-highest-score-algorithm/index.html","searchKeys":["MajorityVotesThenHighestScoreAlgorithm","class MajorityVotesThenHighestScoreAlgorithm<S : ScoreMetric>(var pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf()) : PollAlgorithm<S, SinglePreferenceVote<S>> ","entities.implementations.MajorityVotesThenHighestScoreAlgorithm"]},{"name":"class MajorityVotesThenLowestScoreAlgorithm<S : ScoreMetric>(var pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf()) : PollAlgorithm<S, SinglePreferenceVote<S>> ","description":"entities.implementations.MajorityVotesThenLowestScoreAlgorithm","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-lowest-score-algorithm/index.html","searchKeys":["MajorityVotesThenLowestScoreAlgorithm","class MajorityVotesThenLowestScoreAlgorithm<S : ScoreMetric>(var pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf()) : PollAlgorithm<S, SinglePreferenceVote<S>> ","entities.implementations.MajorityVotesThenLowestScoreAlgorithm"]},{"name":"class MyCondorcetAlgorithm<S : ScoreMetric>(var pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf()) : PollAlgorithm<S, ListOfPreferencesVote<S>> ","description":"entities.implementations.MyCondorcetAlgorithm","location":"kotlin-mp-thesis-library/entities.implementations/-my-condorcet-algorithm/index.html","searchKeys":["MyCondorcetAlgorithm","class MyCondorcetAlgorithm<S : ScoreMetric>(var pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf()) : PollAlgorithm<S, ListOfPreferencesVote<S>> ","entities.implementations.MyCondorcetAlgorithm"]},{"name":"class MyCondorcetRanking<S : ScoreMetric>(algOutput: List<Set<Competitor<S>>>) : RankingAbstraction<S> ","description":"entities.implementations.MyCondorcetRanking","location":"kotlin-mp-thesis-library/entities.implementations/-my-condorcet-ranking/index.html","searchKeys":["MyCondorcetRanking","class MyCondorcetRanking<S : ScoreMetric>(algOutput: List<Set<Competitor<S>>>) : RankingAbstraction<S> ","entities.implementations.MyCondorcetRanking"]},{"name":"class PollSimulation<S : ScoreMetric, V : Vote> : PollAbstraction<S, V> ","description":"entities.implementations.PollSimulation","location":"kotlin-mp-thesis-library/entities.implementations/-poll-simulation/index.html","searchKeys":["PollSimulation","class PollSimulation<S : ScoreMetric, V : Vote> : PollAbstraction<S, V> ","entities.implementations.PollSimulation"]},{"name":"class RankingByDescendingVotesThenHighestScore<S : ScoreMetric>(unorderedRanking: Map<Competitor<S>, Int>) : RankingByDescendingVotes<S> ","description":"entities.implementations.RankingByDescendingVotesThenHighestScore","location":"kotlin-mp-thesis-library/entities.implementations/-ranking-by-descending-votes-then-highest-score/index.html","searchKeys":["RankingByDescendingVotesThenHighestScore","class RankingByDescendingVotesThenHighestScore<S : ScoreMetric>(unorderedRanking: Map<Competitor<S>, Int>) : RankingByDescendingVotes<S> ","entities.implementations.RankingByDescendingVotesThenHighestScore"]},{"name":"class RankingByDescendingVotesThenLowestScore<S : ScoreMetric>(unorderedRanking: Map<Competitor<S>, Int>) : RankingByDescendingVotes<S> ","description":"entities.implementations.RankingByDescendingVotesThenLowestScore","location":"kotlin-mp-thesis-library/entities.implementations/-ranking-by-descending-votes-then-lowest-score/index.html","searchKeys":["RankingByDescendingVotesThenLowestScore","class RankingByDescendingVotesThenLowestScore<S : ScoreMetric>(unorderedRanking: Map<Competitor<S>, Int>) : RankingByDescendingVotes<S> ","entities.implementations.RankingByDescendingVotesThenLowestScore"]},{"name":"constructor()","description":"entities.abstract.CompetitionAbstraction.CompetitionAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-competition-abstraction/-competition-abstraction.html","searchKeys":["CompetitionAbstraction","constructor()","entities.abstract.CompetitionAbstraction.CompetitionAbstraction"]},{"name":"constructor()","description":"entities.abstract.CompetitorAbstraction.CompetitorAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-competitor-abstraction/-competitor-abstraction.html","searchKeys":["CompetitorAbstraction","constructor()","entities.abstract.CompetitorAbstraction.CompetitorAbstraction"]},{"name":"constructor()","description":"entities.abstract.PollAbstraction.PollAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/-poll-abstraction.html","searchKeys":["PollAbstraction","constructor()","entities.abstract.PollAbstraction.PollAbstraction"]},{"name":"constructor()","description":"entities.abstract.RankingAbstraction.RankingAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-ranking-abstraction/-ranking-abstraction.html","searchKeys":["RankingAbstraction","constructor()","entities.abstract.RankingAbstraction.RankingAbstraction"]},{"name":"constructor()","description":"entities.abstract.ScoreAbstraction.ScoreAbstraction","location":"kotlin-mp-thesis-library/entities.abstract/-score-abstraction/-score-abstraction.html","searchKeys":["ScoreAbstraction","constructor()","entities.abstract.ScoreAbstraction.ScoreAbstraction"]},{"name":"constructor()","description":"entities.implementations.DefaultPollManager.DefaultPollManager","location":"kotlin-mp-thesis-library/entities.implementations/-default-poll-manager/-default-poll-manager.html","searchKeys":["DefaultPollManager","constructor()","entities.implementations.DefaultPollManager.DefaultPollManager"]},{"name":"constructor()","description":"entities.implementations.DescendingListOfPreferencesVote.DescendingListOfPreferencesVote","location":"kotlin-mp-thesis-library/entities.implementations/-descending-list-of-preferences-vote/-descending-list-of-preferences-vote.html","searchKeys":["DescendingListOfPreferencesVote","constructor()","entities.implementations.DescendingListOfPreferencesVote.DescendingListOfPreferencesVote"]},{"name":"constructor()","description":"entities.implementations.PollSimulation.PollSimulation","location":"kotlin-mp-thesis-library/entities.implementations/-poll-simulation/-poll-simulation.html","searchKeys":["PollSimulation","constructor()","entities.implementations.PollSimulation.PollSimulation"]},{"name":"constructor()","description":"entities.types.Comparator.HighestScore.HighestScore","location":"kotlin-mp-thesis-library/entities.types/-comparator/-highest-score/-highest-score.html","searchKeys":["HighestScore","constructor()","entities.types.Comparator.HighestScore.HighestScore"]},{"name":"constructor()","description":"entities.types.ScoreMetric.ScoreMetric","location":"kotlin-mp-thesis-library/entities.types/-score-metric/-score-metric.html","searchKeys":["ScoreMetric","constructor()","entities.types.ScoreMetric.ScoreMetric"]},{"name":"constructor(algOutput: List<Set<Competitor<S>>>)","description":"entities.implementations.MyCondorcetRanking.MyCondorcetRanking","location":"kotlin-mp-thesis-library/entities.implementations/-my-condorcet-ranking/-my-condorcet-ranking.html","searchKeys":["MyCondorcetRanking","constructor(algOutput: List<Set<Competitor<S>>>)","entities.implementations.MyCondorcetRanking.MyCondorcetRanking"]},{"name":"constructor(duration: Duration)","description":"entities.types.BestTimeInMatch.BestTimeInMatch","location":"kotlin-mp-thesis-library/entities.types/-best-time-in-match/-best-time-in-match.html","searchKeys":["BestTimeInMatch","constructor(duration: Duration)","entities.types.BestTimeInMatch.BestTimeInMatch"]},{"name":"constructor(pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf())","description":"entities.implementations.MajorityVotesAlgorithm.MajorityVotesAlgorithm","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-algorithm/-majority-votes-algorithm.html","searchKeys":["MajorityVotesAlgorithm","constructor(pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf())","entities.implementations.MajorityVotesAlgorithm.MajorityVotesAlgorithm"]},{"name":"constructor(pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf())","description":"entities.implementations.MajorityVotesThenHighestScoreAlgorithm.MajorityVotesThenHighestScoreAlgorithm","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-highest-score-algorithm/-majority-votes-then-highest-score-algorithm.html","searchKeys":["MajorityVotesThenHighestScoreAlgorithm","constructor(pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf())","entities.implementations.MajorityVotesThenHighestScoreAlgorithm.MajorityVotesThenHighestScoreAlgorithm"]},{"name":"constructor(pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf())","description":"entities.implementations.MajorityVotesThenLowestScoreAlgorithm.MajorityVotesThenLowestScoreAlgorithm","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-lowest-score-algorithm/-majority-votes-then-lowest-score-algorithm.html","searchKeys":["MajorityVotesThenLowestScoreAlgorithm","constructor(pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf())","entities.implementations.MajorityVotesThenLowestScoreAlgorithm.MajorityVotesThenLowestScoreAlgorithm"]},{"name":"constructor(pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf())","description":"entities.implementations.MyCondorcetAlgorithm.MyCondorcetAlgorithm","location":"kotlin-mp-thesis-library/entities.implementations/-my-condorcet-algorithm/-my-condorcet-algorithm.html","searchKeys":["MyCondorcetAlgorithm","constructor(pollAlgorithmParameters: List<PollAlgorithmParameter> = listOf())","entities.implementations.MyCondorcetAlgorithm.MyCondorcetAlgorithm"]},{"name":"constructor(unorderedRanking: Map<Competitor<S>, Int>)","description":"entities.implementations.RankingByDescendingVotes.RankingByDescendingVotes","location":"kotlin-mp-thesis-library/entities.implementations/-ranking-by-descending-votes/-ranking-by-descending-votes.html","searchKeys":["RankingByDescendingVotes","constructor(unorderedRanking: Map<Competitor<S>, Int>)","entities.implementations.RankingByDescendingVotes.RankingByDescendingVotes"]},{"name":"constructor(unorderedRanking: Map<Competitor<S>, Int>)","description":"entities.implementations.RankingByDescendingVotesThenHighestScore.RankingByDescendingVotesThenHighestScore","location":"kotlin-mp-thesis-library/entities.implementations/-ranking-by-descending-votes-then-highest-score/-ranking-by-descending-votes-then-highest-score.html","searchKeys":["RankingByDescendingVotesThenHighestScore","constructor(unorderedRanking: Map<Competitor<S>, Int>)","entities.implementations.RankingByDescendingVotesThenHighestScore.RankingByDescendingVotesThenHighestScore"]},{"name":"constructor(unorderedRanking: Map<Competitor<S>, Int>)","description":"entities.implementations.RankingByDescendingVotesThenLowestScore.RankingByDescendingVotesThenLowestScore","location":"kotlin-mp-thesis-library/entities.implementations/-ranking-by-descending-votes-then-lowest-score/-ranking-by-descending-votes-then-lowest-score.html","searchKeys":["RankingByDescendingVotesThenLowestScore","constructor(unorderedRanking: Map<Competitor<S>, Int>)","entities.implementations.RankingByDescendingVotesThenLowestScore.RankingByDescendingVotesThenLowestScore"]},{"name":"constructor(wins: Int)","description":"entities.types.WinsInCampionship.WinsInCampionship","location":"kotlin-mp-thesis-library/entities.types/-wins-in-campionship/-wins-in-campionship.html","searchKeys":["WinsInCampionship","constructor(wins: Int)","entities.types.WinsInCampionship.WinsInCampionship"]},{"name":"data class BestTimeInMatch(val duration: Duration) : ScoreMetric","description":"entities.types.BestTimeInMatch","location":"kotlin-mp-thesis-library/entities.types/-best-time-in-match/index.html","searchKeys":["BestTimeInMatch","data class BestTimeInMatch(val duration: Duration) : ScoreMetric","entities.types.BestTimeInMatch"]},{"name":"data class WinsInCampionship(val wins: Int) : ScoreMetric","description":"entities.types.WinsInCampionship","location":"kotlin-mp-thesis-library/entities.types/-wins-in-campionship/index.html","searchKeys":["WinsInCampionship","data class WinsInCampionship(val wins: Int) : ScoreMetric","entities.types.WinsInCampionship"]},{"name":"data object AllowMultipleVoteInPollParameter : PollAlgorithmParameter","description":"entities.types.ConstantParameter.AllowMultipleVoteInPollParameter","location":"kotlin-mp-thesis-library/entities.types/-constant-parameter/-allow-multiple-vote-in-poll-parameter/index.html","searchKeys":["AllowMultipleVoteInPollParameter","data object AllowMultipleVoteInPollParameter : PollAlgorithmParameter","entities.types.ConstantParameter.AllowMultipleVoteInPollParameter"]},{"name":"expect object Platform","description":"Platform","location":"kotlin-mp-thesis-library/[root]/-platform/index.html","searchKeys":["Platform","expect object Platform","Platform"]},{"name":"expect val name: String","description":"Platform.name","location":"kotlin-mp-thesis-library/[root]/-platform/name.html","searchKeys":["name","expect val name: String","Platform.name"]},{"name":"fun main()","description":"main","location":"kotlin-mp-thesis-library/[root]/main.html","searchKeys":["main","fun main()","main"]},{"name":"infix fun BestTimeInMatch.Companion.realized(duration: Duration): Score<BestTimeInMatch>","description":"entities.types.BestTimeInMatch.Companion.realized","location":"kotlin-mp-thesis-library/entities.types/-best-time-in-match/-companion/realized.html","searchKeys":["realized","infix fun BestTimeInMatch.Companion.realized(duration: Duration): Score<BestTimeInMatch>","entities.types.BestTimeInMatch.Companion.realized"]},{"name":"infix fun WinsInCampionship.Companion.realized(wins: Int): Score<WinsInCampionship>","description":"entities.types.WinsInCampionship.Companion.realized","location":"kotlin-mp-thesis-library/entities.types/-wins-in-campionship/-companion/realized.html","searchKeys":["realized","infix fun WinsInCampionship.Companion.realized(wins: Int): Score<WinsInCampionship>","entities.types.WinsInCampionship.Companion.realized"]},{"name":"interface Competition<T : ScoreMetric>","description":"entities.interfaces.Competition","location":"kotlin-mp-thesis-library/entities.interfaces/-competition/index.html","searchKeys":["Competition","interface Competition<T : ScoreMetric>","entities.interfaces.Competition"]},{"name":"interface Competitor<S : ScoreMetric>","description":"entities.interfaces.Competitor","location":"kotlin-mp-thesis-library/entities.interfaces/-competitor/index.html","searchKeys":["Competitor","interface Competitor<S : ScoreMetric>","entities.interfaces.Competitor"]},{"name":"interface ListOfPreferencesVote<S : ScoreMetric> : Vote","description":"entities.interfaces.ListOfPreferencesVote","location":"kotlin-mp-thesis-library/entities.interfaces/-list-of-preferences-vote/index.html","searchKeys":["ListOfPreferencesVote","interface ListOfPreferencesVote<S : ScoreMetric> : Vote","entities.interfaces.ListOfPreferencesVote"]},{"name":"interface Poll<S : ScoreMetric, V : Vote>","description":"entities.interfaces.Poll","location":"kotlin-mp-thesis-library/entities.interfaces/-poll/index.html","searchKeys":["Poll","interface Poll<S : ScoreMetric, V : Vote>","entities.interfaces.Poll"]},{"name":"interface PollAlgorithm<S : ScoreMetric, V : Vote>","description":"entities.interfaces.PollAlgorithm","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-algorithm/index.html","searchKeys":["PollAlgorithm","interface PollAlgorithm<S : ScoreMetric, V : Vote>","entities.interfaces.PollAlgorithm"]},{"name":"interface PollAlgorithmParameter","description":"entities.interfaces.PollAlgorithmParameter","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-algorithm-parameter/index.html","searchKeys":["PollAlgorithmParameter","interface PollAlgorithmParameter","entities.interfaces.PollAlgorithmParameter"]},{"name":"interface PollManager<S : ScoreMetric, V : Vote>","description":"entities.interfaces.PollManager","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-manager/index.html","searchKeys":["PollManager","interface PollManager<S : ScoreMetric, V : Vote>","entities.interfaces.PollManager"]},{"name":"interface Ranking<S : ScoreMetric>","description":"entities.interfaces.Ranking","location":"kotlin-mp-thesis-library/entities.interfaces/-ranking/index.html","searchKeys":["Ranking","interface Ranking<S : ScoreMetric>","entities.interfaces.Ranking"]},{"name":"interface Score<T : ScoreMetric>","description":"entities.interfaces.Score","location":"kotlin-mp-thesis-library/entities.interfaces/-score/index.html","searchKeys":["Score","interface Score<T : ScoreMetric>","entities.interfaces.Score"]},{"name":"interface SinglePreferenceVote<S : ScoreMetric> : Vote","description":"entities.interfaces.SinglePreferenceVote","location":"kotlin-mp-thesis-library/entities.interfaces/-single-preference-vote/index.html","searchKeys":["SinglePreferenceVote","interface SinglePreferenceVote<S : ScoreMetric> : Vote","entities.interfaces.SinglePreferenceVote"]},{"name":"interface Vote","description":"entities.interfaces.Vote","location":"kotlin-mp-thesis-library/entities.interfaces/-vote/index.html","searchKeys":["Vote","interface Vote","entities.interfaces.Vote"]},{"name":"interface Voter","description":"entities.interfaces.Voter","location":"kotlin-mp-thesis-library/entities.interfaces/-voter/index.html","searchKeys":["Voter","interface Voter","entities.interfaces.Voter"]},{"name":"lateinit var candidates: List<Competitor<S>>","description":"entities.implementations.MajorityVotesAlgorithm.candidates","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-algorithm/candidates.html","searchKeys":["candidates","lateinit var candidates: List<Competitor<S>>","entities.implementations.MajorityVotesAlgorithm.candidates"]},{"name":"lateinit var candidates: List<Competitor<S>>","description":"entities.implementations.MajorityVotesThenHighestScoreAlgorithm.candidates","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-highest-score-algorithm/candidates.html","searchKeys":["candidates","lateinit var candidates: List<Competitor<S>>","entities.implementations.MajorityVotesThenHighestScoreAlgorithm.candidates"]},{"name":"lateinit var candidates: List<Competitor<S>>","description":"entities.implementations.MajorityVotesThenLowestScoreAlgorithm.candidates","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-lowest-score-algorithm/candidates.html","searchKeys":["candidates","lateinit var candidates: List<Competitor<S>>","entities.implementations.MajorityVotesThenLowestScoreAlgorithm.candidates"]},{"name":"lateinit var candidates: List<Competitor<S>>","description":"entities.implementations.MyCondorcetAlgorithm.candidates","location":"kotlin-mp-thesis-library/entities.implementations/-my-condorcet-algorithm/candidates.html","searchKeys":["candidates","lateinit var candidates: List<Competitor<S>>","entities.implementations.MyCondorcetAlgorithm.candidates"]},{"name":"object Companion","description":"entities.types.BestTimeInMatch.Companion","location":"kotlin-mp-thesis-library/entities.types/-best-time-in-match/-companion/index.html","searchKeys":["Companion","object Companion","entities.types.BestTimeInMatch.Companion"]},{"name":"object Companion","description":"entities.types.WinsInCampionship.Companion","location":"kotlin-mp-thesis-library/entities.types/-wins-in-campionship/-companion/index.html","searchKeys":["Companion","object Companion","entities.types.WinsInCampionship.Companion"]},{"name":"open class RankingByDescendingVotes<S : ScoreMetric>(unorderedRanking: Map<Competitor<S>, Int>) : RankingAbstraction<S> ","description":"entities.implementations.RankingByDescendingVotes","location":"kotlin-mp-thesis-library/entities.implementations/-ranking-by-descending-votes/index.html","searchKeys":["RankingByDescendingVotes","open class RankingByDescendingVotes<S : ScoreMetric>(unorderedRanking: Map<Competitor<S>, Int>) : RankingAbstraction<S> ","entities.implementations.RankingByDescendingVotes"]},{"name":"open infix override fun List<String>.then(s: String): List<String>","description":"entities.implementations.PollSimulation.then","location":"kotlin-mp-thesis-library/entities.implementations/-poll-simulation/then.html","searchKeys":["then","open infix override fun List<String>.then(s: String): List<String>","entities.implementations.PollSimulation.then"]},{"name":"open infix override fun List<String>.votedBy(voterIdentifier: String): ListOfPreferencesVote<S>","description":"entities.implementations.PollSimulation.votedBy","location":"kotlin-mp-thesis-library/entities.implementations/-poll-simulation/voted-by.html","searchKeys":["votedBy","open infix override fun List<String>.votedBy(voterIdentifier: String): ListOfPreferencesVote<S>","entities.implementations.PollSimulation.votedBy"]},{"name":"open infix override fun String.then(s: String): List<String>","description":"entities.implementations.PollSimulation.then","location":"kotlin-mp-thesis-library/entities.implementations/-poll-simulation/then.html","searchKeys":["then","open infix override fun String.then(s: String): List<String>","entities.implementations.PollSimulation.then"]},{"name":"open infix override fun String.votedBy(voterIdentifier: String): SinglePreferenceVote<S>","description":"entities.implementations.PollSimulation.votedBy","location":"kotlin-mp-thesis-library/entities.implementations/-poll-simulation/voted-by.html","searchKeys":["votedBy","open infix override fun String.votedBy(voterIdentifier: String): SinglePreferenceVote<S>","entities.implementations.PollSimulation.votedBy"]},{"name":"open infix override fun initializedAs(initializer: PollManager<S, V>.() -> Unit): PollManager<S, V>","description":"entities.implementations.DefaultPollManager.initializedAs","location":"kotlin-mp-thesis-library/entities.implementations/-default-poll-manager/initialized-as.html","searchKeys":["initializedAs","open infix override fun initializedAs(initializer: PollManager<S, V>.() -> Unit): PollManager<S, V>","entities.implementations.DefaultPollManager.initializedAs"]},{"name":"open lateinit override var competition: Competition<S>","description":"entities.abstract.PollAbstraction.competition","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/competition.html","searchKeys":["competition","open lateinit override var competition: Competition<S>","entities.abstract.PollAbstraction.competition"]},{"name":"open lateinit override var competitionName: String","description":"entities.abstract.CompetitionAbstraction.competitionName","location":"kotlin-mp-thesis-library/entities.abstract/-competition-abstraction/competition-name.html","searchKeys":["competitionName","open lateinit override var competitionName: String","entities.abstract.CompetitionAbstraction.competitionName"]},{"name":"open lateinit override var competitors: List<Competitor<T>>","description":"entities.abstract.CompetitionAbstraction.competitors","location":"kotlin-mp-thesis-library/entities.abstract/-competition-abstraction/competitors.html","searchKeys":["competitors","open lateinit override var competitors: List<Competitor<T>>","entities.abstract.CompetitionAbstraction.competitors"]},{"name":"open lateinit override var name: String","description":"entities.abstract.CompetitorAbstraction.name","location":"kotlin-mp-thesis-library/entities.abstract/-competitor-abstraction/name.html","searchKeys":["name","open lateinit override var name: String","entities.abstract.CompetitorAbstraction.name"]},{"name":"open lateinit override var pollAlgorithm: PollAlgorithm<S, V>","description":"entities.abstract.PollAbstraction.pollAlgorithm","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/poll-algorithm.html","searchKeys":["pollAlgorithm","open lateinit override var pollAlgorithm: PollAlgorithm<S, V>","entities.abstract.PollAbstraction.pollAlgorithm"]},{"name":"open lateinit override var pollList: List<Poll<S, V>>","description":"entities.implementations.DefaultPollManager.pollList","location":"kotlin-mp-thesis-library/entities.implementations/-default-poll-manager/poll-list.html","searchKeys":["pollList","open lateinit override var pollList: List<Poll<S, V>>","entities.implementations.DefaultPollManager.pollList"]},{"name":"open lateinit override var scoreValue: T","description":"entities.abstract.ScoreAbstraction.scoreValue","location":"kotlin-mp-thesis-library/entities.abstract/-score-abstraction/score-value.html","searchKeys":["scoreValue","open lateinit override var scoreValue: T","entities.abstract.ScoreAbstraction.scoreValue"]},{"name":"open lateinit override var votedCompetitors: List<Competitor<S>>","description":"entities.implementations.DescendingListOfPreferencesVote.votedCompetitors","location":"kotlin-mp-thesis-library/entities.implementations/-descending-list-of-preferences-vote/voted-competitors.html","searchKeys":["votedCompetitors","open lateinit override var votedCompetitors: List<Competitor<S>>","entities.implementations.DescendingListOfPreferencesVote.votedCompetitors"]},{"name":"open lateinit override var voter: Voter","description":"entities.implementations.DescendingListOfPreferencesVote.voter","location":"kotlin-mp-thesis-library/entities.implementations/-descending-list-of-preferences-vote/voter.html","searchKeys":["voter","open lateinit override var voter: Voter","entities.implementations.DescendingListOfPreferencesVote.voter"]},{"name":"open lateinit override var votesList: List<V>","description":"entities.abstract.PollAbstraction.votesList","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/votes-list.html","searchKeys":["votesList","open lateinit override var votesList: List<V>","entities.abstract.PollAbstraction.votesList"]},{"name":"open operator fun PollAlgorithmParameter.unaryPlus()","description":"entities.interfaces.PollAlgorithm.unaryPlus","location":"kotlin-mp-thesis-library/entities.interfaces/-poll-algorithm/unary-plus.html","searchKeys":["unaryPlus","open operator fun PollAlgorithmParameter.unaryPlus()","entities.interfaces.PollAlgorithm.unaryPlus"]},{"name":"open operator override fun Competition<S>.unaryMinus()","description":"entities.abstract.PollAbstraction.unaryMinus","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/unary-minus.html","searchKeys":["unaryMinus","open operator override fun Competition<S>.unaryMinus()","entities.abstract.PollAbstraction.unaryMinus"]},{"name":"open operator override fun Competitor<T>.unaryPlus()","description":"entities.abstract.CompetitionAbstraction.unaryPlus","location":"kotlin-mp-thesis-library/entities.abstract/-competition-abstraction/unary-plus.html","searchKeys":["unaryPlus","open operator override fun Competitor<T>.unaryPlus()","entities.abstract.CompetitionAbstraction.unaryPlus"]},{"name":"open operator override fun Poll<S, V>.unaryPlus()","description":"entities.implementations.DefaultPollManager.unaryPlus","location":"kotlin-mp-thesis-library/entities.implementations/-default-poll-manager/unary-plus.html","searchKeys":["unaryPlus","open operator override fun Poll<S, V>.unaryPlus()","entities.implementations.DefaultPollManager.unaryPlus"]},{"name":"open operator override fun PollAlgorithm<S, V>.unaryMinus()","description":"entities.abstract.PollAbstraction.unaryMinus","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/unary-minus.html","searchKeys":["unaryMinus","open operator override fun PollAlgorithm<S, V>.unaryMinus()","entities.abstract.PollAbstraction.unaryMinus"]},{"name":"open operator override fun Score<S>.unaryPlus()","description":"entities.abstract.CompetitorAbstraction.unaryPlus","location":"kotlin-mp-thesis-library/entities.abstract/-competitor-abstraction/unary-plus.html","searchKeys":["unaryPlus","open operator override fun Score<S>.unaryPlus()","entities.abstract.CompetitorAbstraction.unaryPlus"]},{"name":"open operator override fun String.unaryMinus()","description":"entities.abstract.CompetitionAbstraction.unaryMinus","location":"kotlin-mp-thesis-library/entities.abstract/-competition-abstraction/unary-minus.html","searchKeys":["unaryMinus","open operator override fun String.unaryMinus()","entities.abstract.CompetitionAbstraction.unaryMinus"]},{"name":"open operator override fun String.unaryMinus()","description":"entities.abstract.CompetitorAbstraction.unaryMinus","location":"kotlin-mp-thesis-library/entities.abstract/-competitor-abstraction/unary-minus.html","searchKeys":["unaryMinus","open operator override fun String.unaryMinus()","entities.abstract.CompetitorAbstraction.unaryMinus"]},{"name":"open operator override fun V.unaryPlus()","description":"entities.abstract.PollAbstraction.unaryPlus","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/unary-plus.html","searchKeys":["unaryPlus","open operator override fun V.unaryPlus()","entities.abstract.PollAbstraction.unaryPlus"]},{"name":"open operator override fun compareTo(other: Any): Int","description":"entities.types.BestTimeInMatch.compareTo","location":"kotlin-mp-thesis-library/entities.types/-best-time-in-match/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: Any): Int","entities.types.BestTimeInMatch.compareTo"]},{"name":"open operator override fun compareTo(other: Any): Int","description":"entities.types.WinsInCampionship.compareTo","location":"kotlin-mp-thesis-library/entities.types/-wins-in-campionship/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: Any): Int","entities.types.WinsInCampionship.compareTo"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entities.abstract.CompetitorAbstraction.equals","location":"kotlin-mp-thesis-library/entities.abstract/-competitor-abstraction/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entities.abstract.CompetitorAbstraction.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entities.abstract.ScoreAbstraction.equals","location":"kotlin-mp-thesis-library/entities.abstract/-score-abstraction/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entities.abstract.ScoreAbstraction.equals"]},{"name":"open override fun compare(a: Score<S>, b: Score<S>): Int","description":"entities.types.Comparator.HighestScore.compare","location":"kotlin-mp-thesis-library/entities.types/-comparator/-highest-score/compare.html","searchKeys":["compare","open override fun compare(a: Score<S>, b: Score<S>): Int","entities.types.Comparator.HighestScore.compare"]},{"name":"open override fun competition(compInit: Competition<S>.() -> Unit): Competition<S>","description":"entities.abstract.PollAbstraction.competition","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/competition.html","searchKeys":["competition","open override fun competition(compInit: Competition<S>.() -> Unit): Competition<S>","entities.abstract.PollAbstraction.competition"]},{"name":"open override fun competitor(compInit: Competitor<T>.() -> Unit): Competitor<T>","description":"entities.abstract.CompetitionAbstraction.competitor","location":"kotlin-mp-thesis-library/entities.abstract/-competition-abstraction/competitor.html","searchKeys":["competitor","open override fun competitor(compInit: Competitor<T>.() -> Unit): Competitor<T>","entities.abstract.CompetitionAbstraction.competitor"]},{"name":"open override fun computeAllPolls(): List<Ranking<S>>","description":"entities.implementations.DefaultPollManager.computeAllPolls","location":"kotlin-mp-thesis-library/entities.implementations/-default-poll-manager/compute-all-polls.html","searchKeys":["computeAllPolls","open override fun computeAllPolls(): List<Ranking<S>>","entities.implementations.DefaultPollManager.computeAllPolls"]},{"name":"open override fun computeByAlgorithmRules(votes: List<ListOfPreferencesVote<S>>): Ranking<S>","description":"entities.implementations.MyCondorcetAlgorithm.computeByAlgorithmRules","location":"kotlin-mp-thesis-library/entities.implementations/-my-condorcet-algorithm/compute-by-algorithm-rules.html","searchKeys":["computeByAlgorithmRules","open override fun computeByAlgorithmRules(votes: List<ListOfPreferencesVote<S>>): Ranking<S>","entities.implementations.MyCondorcetAlgorithm.computeByAlgorithmRules"]},{"name":"open override fun computeByAlgorithmRules(votes: List<SinglePreferenceVote<S>>): Ranking<S>","description":"entities.implementations.MajorityVotesAlgorithm.computeByAlgorithmRules","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-algorithm/compute-by-algorithm-rules.html","searchKeys":["computeByAlgorithmRules","open override fun computeByAlgorithmRules(votes: List<SinglePreferenceVote<S>>): Ranking<S>","entities.implementations.MajorityVotesAlgorithm.computeByAlgorithmRules"]},{"name":"open override fun computeByAlgorithmRules(votes: List<SinglePreferenceVote<S>>): Ranking<S>","description":"entities.implementations.MajorityVotesThenHighestScoreAlgorithm.computeByAlgorithmRules","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-highest-score-algorithm/compute-by-algorithm-rules.html","searchKeys":["computeByAlgorithmRules","open override fun computeByAlgorithmRules(votes: List<SinglePreferenceVote<S>>): Ranking<S>","entities.implementations.MajorityVotesThenHighestScoreAlgorithm.computeByAlgorithmRules"]},{"name":"open override fun computeByAlgorithmRules(votes: List<SinglePreferenceVote<S>>): Ranking<S>","description":"entities.implementations.MajorityVotesThenLowestScoreAlgorithm.computeByAlgorithmRules","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-lowest-score-algorithm/compute-by-algorithm-rules.html","searchKeys":["computeByAlgorithmRules","open override fun computeByAlgorithmRules(votes: List<SinglePreferenceVote<S>>): Ranking<S>","entities.implementations.MajorityVotesThenLowestScoreAlgorithm.computeByAlgorithmRules"]},{"name":"open override fun computePoll(): Ranking<S>","description":"entities.abstract.PollAbstraction.computePoll","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/compute-poll.html","searchKeys":["computePoll","open override fun computePoll(): Ranking<S>","entities.abstract.PollAbstraction.computePoll"]},{"name":"open override fun condorcetAlgorithm(algInit: PollAlgorithm<S, ListOfPreferencesVote<S>>.() -> Unit): PollAlgorithm<S, ListOfPreferencesVote<S>>","description":"entities.abstract.PollAbstraction.condorcetAlgorithm","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/condorcet-algorithm.html","searchKeys":["condorcetAlgorithm","open override fun condorcetAlgorithm(algInit: PollAlgorithm<S, ListOfPreferencesVote<S>>.() -> Unit): PollAlgorithm<S, ListOfPreferencesVote<S>>","entities.abstract.PollAbstraction.condorcetAlgorithm"]},{"name":"open override fun hashCode(): Int","description":"entities.abstract.CompetitorAbstraction.hashCode","location":"kotlin-mp-thesis-library/entities.abstract/-competitor-abstraction/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entities.abstract.CompetitorAbstraction.hashCode"]},{"name":"open override fun hashCode(): Int","description":"entities.abstract.ScoreAbstraction.hashCode","location":"kotlin-mp-thesis-library/entities.abstract/-score-abstraction/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entities.abstract.ScoreAbstraction.hashCode"]},{"name":"open override fun majorityVotesAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","description":"entities.abstract.PollAbstraction.majorityVotesAlgorithm","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/majority-votes-algorithm.html","searchKeys":["majorityVotesAlgorithm","open override fun majorityVotesAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","entities.abstract.PollAbstraction.majorityVotesAlgorithm"]},{"name":"open override fun majorityVotesHScoreAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","description":"entities.abstract.PollAbstraction.majorityVotesHScoreAlgorithm","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/majority-votes-h-score-algorithm.html","searchKeys":["majorityVotesHScoreAlgorithm","open override fun majorityVotesHScoreAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","entities.abstract.PollAbstraction.majorityVotesHScoreAlgorithm"]},{"name":"open override fun majorityVotesLScoreAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","description":"entities.abstract.PollAbstraction.majorityVotesLScoreAlgorithm","location":"kotlin-mp-thesis-library/entities.abstract/-poll-abstraction/majority-votes-l-score-algorithm.html","searchKeys":["majorityVotesLScoreAlgorithm","open override fun majorityVotesLScoreAlgorithm(algInit: PollAlgorithm<S, SinglePreferenceVote<S>>.() -> Unit): PollAlgorithm<S, SinglePreferenceVote<S>>","entities.abstract.PollAbstraction.majorityVotesLScoreAlgorithm"]},{"name":"open override fun poll(newPoll: Poll<S, V>.() -> Unit): Poll<S, V>","description":"entities.implementations.DefaultPollManager.poll","location":"kotlin-mp-thesis-library/entities.implementations/-default-poll-manager/poll.html","searchKeys":["poll","open override fun poll(newPoll: Poll<S, V>.() -> Unit): Poll<S, V>","entities.implementations.DefaultPollManager.poll"]},{"name":"open override fun printRanking()","description":"entities.abstract.RankingAbstraction.printRanking","location":"kotlin-mp-thesis-library/entities.abstract/-ranking-abstraction/print-ranking.html","searchKeys":["printRanking","open override fun printRanking()","entities.abstract.RankingAbstraction.printRanking"]},{"name":"open override fun toString(): String","description":"entities.abstract.CompetitorAbstraction.toString","location":"kotlin-mp-thesis-library/entities.abstract/-competitor-abstraction/to-string.html","searchKeys":["toString","open override fun toString(): String","entities.abstract.CompetitorAbstraction.toString"]},{"name":"open override fun toString(): String","description":"entities.abstract.ScoreAbstraction.toString","location":"kotlin-mp-thesis-library/entities.abstract/-score-abstraction/to-string.html","searchKeys":["toString","open override fun toString(): String","entities.abstract.ScoreAbstraction.toString"]},{"name":"open override val parameter: String","description":"entities.types.ConstantParameter.AllowMultipleVoteInPollParameter.parameter","location":"kotlin-mp-thesis-library/entities.types/-constant-parameter/-allow-multiple-vote-in-poll-parameter/parameter.html","searchKeys":["parameter","open override val parameter: String","entities.types.ConstantParameter.AllowMultipleVoteInPollParameter.parameter"]},{"name":"open override val ranking: Map<Set<Competitor<S>>, Int?>","description":"entities.implementations.MyCondorcetRanking.ranking","location":"kotlin-mp-thesis-library/entities.implementations/-my-condorcet-ranking/ranking.html","searchKeys":["ranking","open override val ranking: Map<Set<Competitor<S>>, Int?>","entities.implementations.MyCondorcetRanking.ranking"]},{"name":"open override val ranking: Map<Set<Competitor<S>>, Int?>","description":"entities.implementations.RankingByDescendingVotes.ranking","location":"kotlin-mp-thesis-library/entities.implementations/-ranking-by-descending-votes/ranking.html","searchKeys":["ranking","open override val ranking: Map<Set<Competitor<S>>, Int?>","entities.implementations.RankingByDescendingVotes.ranking"]},{"name":"open override val ranking: Map<Set<Competitor<S>>, Int?>","description":"entities.implementations.RankingByDescendingVotesThenHighestScore.ranking","location":"kotlin-mp-thesis-library/entities.implementations/-ranking-by-descending-votes-then-highest-score/ranking.html","searchKeys":["ranking","open override val ranking: Map<Set<Competitor<S>>, Int?>","entities.implementations.RankingByDescendingVotesThenHighestScore.ranking"]},{"name":"open override val ranking: Map<Set<Competitor<S>>, Int?>","description":"entities.implementations.RankingByDescendingVotesThenLowestScore.ranking","location":"kotlin-mp-thesis-library/entities.implementations/-ranking-by-descending-votes-then-lowest-score/ranking.html","searchKeys":["ranking","open override val ranking: Map<Set<Competitor<S>>, Int?>","entities.implementations.RankingByDescendingVotesThenLowestScore.ranking"]},{"name":"open override var pollAlgorithmParameters: List<PollAlgorithmParameter>","description":"entities.implementations.MajorityVotesAlgorithm.pollAlgorithmParameters","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-algorithm/poll-algorithm-parameters.html","searchKeys":["pollAlgorithmParameters","open override var pollAlgorithmParameters: List<PollAlgorithmParameter>","entities.implementations.MajorityVotesAlgorithm.pollAlgorithmParameters"]},{"name":"open override var pollAlgorithmParameters: List<PollAlgorithmParameter>","description":"entities.implementations.MajorityVotesThenHighestScoreAlgorithm.pollAlgorithmParameters","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-highest-score-algorithm/poll-algorithm-parameters.html","searchKeys":["pollAlgorithmParameters","open override var pollAlgorithmParameters: List<PollAlgorithmParameter>","entities.implementations.MajorityVotesThenHighestScoreAlgorithm.pollAlgorithmParameters"]},{"name":"open override var pollAlgorithmParameters: List<PollAlgorithmParameter>","description":"entities.implementations.MajorityVotesThenLowestScoreAlgorithm.pollAlgorithmParameters","location":"kotlin-mp-thesis-library/entities.implementations/-majority-votes-then-lowest-score-algorithm/poll-algorithm-parameters.html","searchKeys":["pollAlgorithmParameters","open override var pollAlgorithmParameters: List<PollAlgorithmParameter>","entities.implementations.MajorityVotesThenLowestScoreAlgorithm.pollAlgorithmParameters"]},{"name":"open override var pollAlgorithmParameters: List<PollAlgorithmParameter>","description":"entities.implementations.MyCondorcetAlgorithm.pollAlgorithmParameters","location":"kotlin-mp-thesis-library/entities.implementations/-my-condorcet-algorithm/poll-algorithm-parameters.html","searchKeys":["pollAlgorithmParameters","open override var pollAlgorithmParameters: List<PollAlgorithmParameter>","entities.implementations.MyCondorcetAlgorithm.pollAlgorithmParameters"]},{"name":"open override var scores: List<Score<S>>","description":"entities.abstract.CompetitorAbstraction.scores","location":"kotlin-mp-thesis-library/entities.abstract/-competitor-abstraction/scores.html","searchKeys":["scores","open override var scores: List<Score<S>>","entities.abstract.CompetitorAbstraction.scores"]},{"name":"sealed class Comparator","description":"entities.types.Comparator","location":"kotlin-mp-thesis-library/entities.types/-comparator/index.html","searchKeys":["Comparator","sealed class Comparator","entities.types.Comparator"]},{"name":"sealed class ConstantParameter","description":"entities.types.ConstantParameter","location":"kotlin-mp-thesis-library/entities.types/-constant-parameter/index.html","searchKeys":["ConstantParameter","sealed class ConstantParameter","entities.types.ConstantParameter"]},{"name":"val duration: Duration","description":"entities.types.BestTimeInMatch.duration","location":"kotlin-mp-thesis-library/entities.types/-best-time-in-match/duration.html","searchKeys":["duration","val duration: Duration","entities.types.BestTimeInMatch.duration"]},{"name":"val wins: Int","description":"entities.types.WinsInCampionship.wins","location":"kotlin-mp-thesis-library/entities.types/-wins-in-campionship/wins.html","searchKeys":["wins","val wins: Int","entities.types.WinsInCampionship.wins"]}]
